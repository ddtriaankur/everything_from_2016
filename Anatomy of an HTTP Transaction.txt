
Anatomy of an HTTP Transaction
- EventEmitter and Streams in node js

Create the Server
- any node web server app will at some point have to create a web server object
- this is done by using 'createServer', Example
>> 
	var http = require('http');

	var server = http.createServer(function(request, response) {
	  // magic happens here!
	});

- the function that's passed in to 'createServer' is called once for every HTTP request that's made against that server
- its called the request handler
- In fact, the 'server'
 object returned by 'createServer' is an 'EventEmitter', 
- 
>> 	var server = http.createServer();
		server.on('request', function (request, response){

			// the same kind of magic happens here !
		});


- when an HTTP request hits the server, node calls the request handler function with a few handy objects for dealing with the transaction, request and response.
- 'listen' method needs to be called on the 'server' object
- you can pass the port number to the 'listen', or there are some other options too

METHOD, URL and Header
- properties onto the 'request' object
	var method = request.method;
	var url = request.url;
Note : The 'request' object is an instance of 'IncomingMessage'

- the url is the full URL without the server, protocol or port, rawHeaders is also available
	var headers = request.headers;
	var userAgent = headers['user-agent'];

Request Body

- the chunck emitter in each 'data' event is a 'Buffer'
- the best thing to do is collect the data in an array, then at the 'end', concatenate and stringify it.
	
	var body = []
	
	request.on('data', function (chunk) {
		body.push(chunk);     // pushing chunk in the array 
	}).on('end', function () {
		body = Buffer.concat(body).toString();
		// at this point, `body` has the entire request body stored in it as a striing
	});

Note: Luckily, there are modules like 'concat-stream' and 'body' on 'npm' which can help hide away some of this logic.

- if you don't have a listener for the error event, the error will be thrown, which wcould crash you Node js program
- there are other ways of handling error, such as abstractions and tool

request.on('err', function (err){
	// this prints the error message and stack trace to `stderr`
	console.error(err.stack);
});

HTTP Status Code
- 200 is default
Setting Response Header
>> response.setHeader('Content-Type', 'application/json')
^^ these are setting up the header implicitly

Explicitly Sending Header Data
- response.writeHead(200, {
	'Content-Type': 'application/json',
	'X-Powered-By': 'bacon'
});

Sending Response Body
>> response.write('<html>')
>> .......
>> response.end();
- the end function on streams can also take in some optional data to send as the last bit of data on the stream
Note: It's important to set the status and headers before you start writing chunks of data to the body. 
- This makes sense, since headers come before the body in HTTP responses.
- The response stream can also emit 'error' event,

Put it ALl together
- make a server that sends back all of the data that was sent to us by the user in the JSON format using JSON.stringify

Echo Server Example
- sends whatever data is received in the request right back in the response
- all we need to do is grab the data from the request stream and write that data to the response stream
- if you're looking for something that does routing and nothing else, try 'router'

Remember
- the 'request' object is a 'ReadableStream' and the 'response' object is a 'WritableStream'. That means we can use 'pipe' to direct data from one to the other.

To handle error

You should be able to :
- Instantiate an HTTP server with a request handler function, and have it listen on a port
- Get headers, URL, method and body data from request objects
- Make routing decisions baseed on URL and/or other data in 'request' objects
- Send headers, HTTP status codes and body data via 'response' objects
- Pipe data from 'request' objects and to 'response' objects
- Handle stream errors in both the 'request' and 'response' streams

router
// notes
check location obj in the console
location.host = 'fb.com'